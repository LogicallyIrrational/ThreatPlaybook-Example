graph LR
	login_user[As an employee of the<br />organization, I would like to<br />login to the Customer API and<br />manage Customer Information]-->external_attacker_account_takeover[As an external attacker, I<br />would compromise a<br />single/multiple user accounts<br />to gain access to sensitive<br />customer information]
	external_attacker_account_takeover[As an external attacker, I<br />would compromise a<br />single/multiple user accounts<br />to gain access to sensitive<br />customer information]-->auth_token_hijack_xss[Attacker attempts to steal<br />Auth Token from user with<br />malicious client-side script.<br />Target is any front-end using<br />the API]
	auth_token_hijack_xss[Attacker attempts to steal<br />Auth Token from user with<br />malicious client-side script.<br />Target is any front-end using<br />the API]-->persistent_xss_manual[check for manual XSS<br />persistent]
	auth_token_hijack_xss[Attacker attempts to steal<br />Auth Token from user with<br />malicious client-side script.<br />Target is any front-end using<br />the API]-->persistent_xss_zap[check for persistent XSS with<br />ZAP]
	auth_token_hijack_xss[Attacker attempts to steal<br />Auth Token from user with<br />malicious client-side script.<br />Target is any front-end using<br />the API]-->reflected_xss_zap[check for reflected XSS ZAP]
	auth_token_hijack_xss[Attacker attempts to steal<br />Auth Token from user with<br />malicious client-side script.<br />Target is any front-end using<br />the API]-->reflected_xss_manual[check for manual XSS reflected]
	external_attacker_account_takeover[As an external attacker, I<br />would compromise a<br />single/multiple user accounts<br />to gain access to sensitive<br />customer information]-->end_user_weak_password[External attacker may be able<br />to bypass user authentication<br />by compromising weak passwords<br />of users]
	end_user_weak_password[External attacker may be able<br />to bypass user authentication<br />by compromising weak passwords<br />of users]-->default_passwords[Check for Default passwords<br />for ZAP Fuzzer]
	end_user_weak_password[External attacker may be able<br />to bypass user authentication<br />by compromising weak passwords<br />of users]-->bruteforce_login[Check for weak passwords for<br />ZAP Fuzzer]
	external_attacker_account_takeover[As an external attacker, I<br />would compromise a<br />single/multiple user accounts<br />to gain access to sensitive<br />customer information]-->end_user_default_password[External attacker may be able<br />to bypass user authentication<br />by compromising default<br />passwords of users]
	end_user_default_password[External attacker may be able<br />to bypass user authentication<br />by compromising default<br />passwords of users]-->default_passwords[Check for Default passwords<br />for ZAP Fuzzer]
	external_attacker_account_takeover[As an external attacker, I<br />would compromise a<br />single/multiple user accounts<br />to gain access to sensitive<br />customer information]-->sql_injection_user_account_access[External Attacker may be able<br />to gain access to user<br />accounts by successfully<br />performing SQL Injection<br />Attacks against some of the<br />unauthenticated API Endpoints<br />in the application]
	sql_injection_user_account_access[External Attacker may be able<br />to gain access to user<br />accounts by successfully<br />performing SQL Injection<br />Attacks against some of the<br />unauthenticated API Endpoints<br />in the application]-->sql_injection_auto[Use Automated Vulnerability<br />Scanners to test for SQL<br />Injection]
	sql_injection_user_account_access[External Attacker may be able<br />to gain access to user<br />accounts by successfully<br />performing SQL Injection<br />Attacks against some of the<br />unauthenticated API Endpoints<br />in the application]-->generic_error_messages[Attempt to force generic Error<br />Messages, especially 500<br />Errors]
	sql_injection_user_account_access[External Attacker may be able<br />to gain access to user<br />accounts by successfully<br />performing SQL Injection<br />Attacks against some of the<br />unauthenticated API Endpoints<br />in the application]-->database_hardening_check[check database for low-priv<br />users, authorization and<br />hardening]
	external_attacker_account_takeover[As an external attacker, I<br />would compromise a<br />single/multiple user accounts<br />to gain access to sensitive<br />customer information]-->auth_token_hijacking_mitm[Attacker attempts to<br />compromise auth token by<br />gaining access to the end<br />user's auth token by<br />performing Man in the Middle<br />Attacks]
	auth_token_hijacking_mitm[Attacker attempts to<br />compromise auth token by<br />gaining access to the end<br />user's auth token by<br />performing Man in the Middle<br />Attacks]-->ssl_checks[tests against SSL with<br />SSLLabs.com, Burp and Zap]
